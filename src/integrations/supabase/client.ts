
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bgnngzkkpeifzayrjvbz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJnbm5nemtrcGVpZnpheXJqdmJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNDQ5ODcsImV4cCI6MjA1ODkyMDk4N30.5JDoF8xK3e1fLv14TUZ4tTrbE4llP_6fqtg0PY-dYlw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Export the client with a different name for legacy code
export const customSupabase = supabase;

// Type definitions
export type Json = Database['public']['Tables']['page_content']['Row']['content'];

// Extended partner type with optional fields for compatibility
export interface Partner extends Database['public']['Tables']['partners']['Row'] {
  // Additional properties that might be added during data processing
  website_url: string | null;
}

// Extended event type with additional fields for UI purposes
export interface Event extends Database['public']['Tables']['events']['Row'] {
  // Additional UI-specific properties
  title?: string;
  date?: string;
  time?: string;
  image?: string;
  location?: string; 
  past?: boolean;
  registrationLink?: string;
}

// Extended schedule day type with events array
export interface ScheduleDay extends Database['public']['Tables']['schedule_days']['Row'] {
  events?: ScheduleEvent[];
}

export type ScheduleEvent = Database['public']['Tables']['schedule_events']['Row'];
export type Ticket = Database['public']['Tables']['tickets']['Row'];
export type PageContent = Database['public']['Tables']['page_content']['Row'];

// Utility functions
export const safeDataAccess = <T>(value: any, defaultValue: T): T => {
  return value !== null && value !== undefined ? value : defaultValue;
};

// File upload utility
export const uploadFileToSupabase = async (
  file: File,
  bucketName: string,
  filePath: string
): Promise<string | null> => {
  try {
    const { data, error } = await supabase.storage
      .from(bucketName)
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: true,
      });

    if (error) {
      console.error('Error uploading file:', error);
      return null;
    }

    const { data: urlData } = supabase.storage
      .from(bucketName)
      .getPublicUrl(data?.path || filePath);

    return urlData.publicUrl;
  } catch (error) {
    console.error('Error in uploadFileToSupabase:', error);
    return null;
  }
};
